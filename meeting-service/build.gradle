buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'

    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

    id "org.asciidoctor.jvm.convert" version "3.3.2"

    id 'java'
}

group = 'com.comeon'
version = '1.0'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Eureka Client 연동
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // Bootstrap.yml 활성화
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

    // Config Server 연동
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // Actuator 연동
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Cloud Bus + RabbitMQ 연동
    implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'

    // AWS S3 연동
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // p6spy: 쿼리 파라미터 로그 출력
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // mysql
    implementation 'mysql:mysql-connector-java'

    // openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // resilience4j
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.8.RELEASE'

    implementation 'com.google.code.gson:gson'

    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-inline:4.7.0'

    // test에서 Jwt 사용
    testImplementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test

    sources{
        include('**/index.adoc','**/popup/*.adoc')
    }

    baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}